# -*- coding: utf-8 -*-
"""UI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wWeES3YmaySvvCnpLzuJ9Qkee5nbQY7p
"""

from PyQt5.QtWidgets import QWidget, QLabel, QVBoxLayout, QPushButton, QTextEdit
from PyQt5.QtCore import QThread, pyqtSignal
from chatbot_main import get_response, words, classes, data
from train import pred_class

class Worker(QThread):
    finished = pyqtSignal(str)

    def __init__(self, text, words, classes, data):
        super(Worker, self).__init__()
        self.text = text
        self.words = words
        self.classes = classes
        self.data = data

    def run(self):
        try:
            intents = pred_class(self.text, self.words, self.classes)
            result = get_response(intents, self.data)
            self.finished.emit(result)
        except Exception as e:
            print(f"Error in Worker thread: {e}")


class ChatUi(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Chat Bot")

        self.layout = QVBoxLayout()

        self.text = QTextEdit()
        self.button = QPushButton("Submit")
        self.quitButton = QPushButton("Quit")
        self.resultLabel = QLabel()

        self.layout.addWidget(self.text)
        self.layout.addWidget(self.button)
        self.layout.addWidget(self.quitButton)
        self.layout.addWidget(self.resultLabel)

        self.setLayout(self.layout)

        self.thread = None  # Initialize thread as None

        self.button.clicked.connect(self.start_worker)
        self.quitButton.clicked.connect(self.close)

    def start_worker(self):
        if self.thread is not None and self.thread.isRunning():
            return
        self.thread = Worker(self.text.toPlainText(), words, classes, data)
        self.thread.finished.connect(lambda result: [self.text.clear(), self.resultLabel.setText(result)])  # 新增：清空输入框并设置结果
        self.thread.start()
