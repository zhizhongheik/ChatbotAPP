# -*- coding: utf-8 -*-
"""chatbot_main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qAbZHN8fm5TO21jIZYTU8xZJILr_B9Pi
"""

import json
import string
import random
import nltk
import numpy as np
from nltk.stem import WordNetLemmatizer
import glob

import time
print("start")
time.sleep(5)
print("end")

#nltk.download("punkt") 
#nltk.download ("wordnet")

data_files = glob.glob(r'C:\Users\zoule\Desktop\Chatbot\intents.json') #Change your path

for data_file in data_files:
  data = json.loads(open(data_file, 'r', encoding='utf-8').read())
  print(data)

words =[]
classes=[]
data_x = []
data_y = []


for intent in data["intents"]:
  for pattern in intent["patterns"]:
      tokens = nltk.word_tokenize(pattern)
      words.extend(tokens)
      data_x.append(pattern)
      data_y.append(intent["tag"])

  if intent["tag"] not in classes:
    classes.append(intent["tag"])

lemmatizer = WordNetLemmatizer()

words = [lemmatizer.lemmatize(word.lower()) for word in words if word not in string.punctuation]
# sorting the vocab and classes in alphabetical order and # set to ensure no duplicates occur

words = sorted(set(words))
classes = sorted(set(classes))

training = []
out_empty = [0] * len(classes)

#creating the bag of words model

for idx, doc in enumerate(data_x):
  bow = []
  text = lemmatizer.lemmatize(doc.lower())
  for word in words:
    bow.append(1) if word in text else bow.append(0)

  output_row = list(out_empty)
  output_row[classes.index(data_y[idx])] = 1

  training.append([bow, output_row])

random.shuffle(training)
training = np.array(training, dtype = object)

train_X = np.array(list(training[:, 0]))
train_Y = np.array(list(training[:, 1]))


def clean_text(text):
  tokens=nltk.word_tokenize(text)
  tokens=[lemmatizer.lemmatize(word)for word in tokens]
  return tokens
def bag_of_words(text,vocab):
  tokens=clean_text(text)
  bow=[0]*len(vocab)
  for w in tokens:
    for idx,word in enumerate(vocab):
      if word==w:
        bow[idx]=1
  return np.array(bow)


def get_response(intents_list,intents_json):
  if len(intents_list)==0:
    result="Sorry! I don't understand"
  else:
    tag=intents_list[0]
    list_of_intents=intents_json["intents"]
    for i in list_of_intents:
      if i["tag"]==tag:
        result=random.choice(i["responses"])
        break
  return result

#Test
#print("Press 0 if you don't want to chat with our ChatBot.")
#while True:
#    message = input("")
#    if message == "0":
#        break
#    intents = pred_class(message, words, classes)
#    result = get_response(intents, data)
#    print(result)